<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OBS Number Overlay</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100vw;
            height: 100vh;
            background: transparent;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Arial', sans-serif;
            overflow: hidden;
        }

        #number-display {
            font-size: 12rem;
            font-weight: bold;
            color: white;
            text-shadow: 
                3px 3px 0px black,
                -3px -3px 0px black,
                3px -3px 0px black,
                -3px 3px 0px black,
                0px 3px 0px black,
                3px 0px 0px black,
                0px -3px 0px black,
                -3px 0px 0px black;
            user-select: none;
            letter-spacing: 0.5rem;
            min-width: 8ch;
            text-align: center;
        }

        /* Instructions (can be hidden) */
        #instructions {
            position: fixed;
            top: 20px;
            left: 20px;
            color: white;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border-radius: 8px;
            font-size: 14px;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        #instructions.show {
            opacity: 1;
            visibility: visible;
        }

        #timer-container {
            position: fixed;
            bottom: 40px;
            left: 40px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #timer-display {
            font-size: 4rem;
            font-weight: bold;
            color: white;
            text-shadow: 
                2px 2px 0px black,
                -2px -2px 0px black,
                2px -2px 0px black,
                -2px 2px 0px black,
                0px 2px 0px black,
                2px 0px 0px black,
                0px -2px 0px black,
                -2px 0px 0px black;
            user-select: none;
            font-family: 'Courier New', monospace;
            transition: color 0.3s ease;
        }

        #timer-display.running {
            color: #4CAF50 !important;
        }

        .timer-expired {
            color: #ff4444 !important;
            animation: flash 0.5s infinite alternate;
        }

        @keyframes flash {
            0% { opacity: 1; }
            100% { opacity: 0.5; }
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div id="instructions">
        Type 0-9 to enter numbers (each digit locks in place)<br>
        Spacebar or Backspace to clear and restart flashing | H to toggle this help<br>
        Timer: Up Arrow=Reset to 1 min (paused) | Down Arrow=Start/Pause (hold for rapid countdown)
    </div>
    <div id="number-display">0000</div>
    
    <div id="timer-container">
        <div id="timer-display">01:00</div>
    </div>

    <script>
        const display = document.getElementById('number-display');
        const instructions = document.getElementById('instructions');
        const timerDisplay = document.getElementById('timer-display');
        const timerContainer = document.getElementById('timer-container');
        
        let currentNumber = '0000';
        let inputNumber = ''; // Track what user is typing
        let isFlashing = true; // Random number animation state
        let flashInterval = null;
        let helpTimeout = null; // For help popup timing
        let lockedPositions = 0; // Track how many positions are locked
        
        // Timer variables
        let timeRemaining = 60; // 60 seconds
        let timerInterval = null;
        let isTimerRunning = false;
        let isDownArrowHeld = false;
        let rapidCountdownInterval = null;
        let wasTimerRunning = false; // Track if timer was running before rapid countdown
        
        function updateDisplay() {
            display.textContent = currentNumber;
        }

        function generateRandomNumber() {
            return Math.floor(Math.random() * 10000).toString().padStart(4, '0');
        }

        function generateMixedNumber() {
            // Create number with locked positions from input and random for unlocked
            let result = '';
            let randomNum = generateRandomNumber();
            
            for (let i = 0; i < 4; i++) {
                if (i < lockedPositions && i < inputNumber.length) {
                    // Use locked input digit
                    result += inputNumber[i];
                } else {
                    // Use random digit
                    result += randomNum[i];
                }
            }
            
            return result;
        }

        function startFlashing() {
            if (flashInterval) clearInterval(flashInterval);
            isFlashing = true;
            
            // Start with a mixed number immediately
            currentNumber = generateMixedNumber();
            updateDisplay();
            
            flashInterval = setInterval(() => {
                if (isFlashing) {
                    currentNumber = generateMixedNumber();
                    updateDisplay();
                }
            }, 80); // Slightly slower for better visibility
        }

        function stopFlashing() {
            if (flashInterval) {
                clearInterval(flashInterval);
                flashInterval = null;
            }
            isFlashing = false;
            
            // Show the number user typed, or keep current if none typed
            if (inputNumber.length > 0) {
                currentNumber = inputNumber.padStart(4, '0');
            }
            updateDisplay();
        }

        function showHelp() {
            // Toggle help visibility
            instructions.classList.toggle('show');
            
            // Clear any existing timeout since this is now a toggle
            if (helpTimeout) {
                clearTimeout(helpTimeout);
                helpTimeout = null;
            }
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // Flash red when expired
            if (timeRemaining <= 0) {
                timerDisplay.classList.add('timer-expired');
            } else {
                timerDisplay.classList.remove('timer-expired');
            }
        }

        function startTimer() {
            if (timerInterval) clearInterval(timerInterval);
            
            isTimerRunning = true;
            timerDisplay.classList.add('running');
            timerDisplay.classList.remove('timer-expired');
            
            timerInterval = setInterval(() => {
                if (timeRemaining > 0) {
                    timeRemaining--;
                    updateTimerDisplay();
                } else {
                    // Timer expired
                    pauseTimer();
                }
            }, 1000);
        }

        function startRapidCountdown() {
            if (rapidCountdownInterval) clearInterval(rapidCountdownInterval);
            
            // Remember if timer was running before we start rapid countdown
            wasTimerRunning = isTimerRunning;
            
            rapidCountdownInterval = setInterval(() => {
                if (timeRemaining > 0) {
                    timeRemaining--;
                    updateTimerDisplay();
                } else {
                    // Timer expired
                    stopRapidCountdown();
                    pauseTimer();
                    wasTimerRunning = false;
                }
            }, 100); // 100ms = 10x faster
        }

        function stopRapidCountdown() {
            if (rapidCountdownInterval) {
                clearInterval(rapidCountdownInterval);
                rapidCountdownInterval = null;
            }
        }

        function pauseTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            stopRapidCountdown();
            isTimerRunning = false;
            timerDisplay.classList.remove('running');
        }

        function resetTimer() {
            pauseTimer();
            isDownArrowHeld = false;
            stopRapidCountdown();
            wasTimerRunning = false;
            timeRemaining = 60;
            timerDisplay.classList.remove('timer-expired');
            updateTimerDisplay();
        }

        function startTyping() {
            isTyping = true;
            display.classList.add('typing');
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                isTyping = false;
                display.classList.remove('typing');
            }, 1000);
        }

        document.addEventListener('keydown', function(event) {
            // Prevent default for all keys we handle
            if (['ArrowUp', 'ArrowDown', 'Backspace', 'Space'].includes(event.code) || 
                (event.key >= '0' && event.key <= '9') || 
                event.key.toLowerCase() === 'h') {
                event.preventDefault();
            }
            
            // Timer controls
            if (event.code === 'ArrowUp') {
                resetTimer();
                return;
            }
            
            if (event.code === 'ArrowDown') {
                if (!isDownArrowHeld) {
                    isDownArrowHeld = true;
                    
                    // First press - toggle start/pause
                    if (isTimerRunning) {
                        pauseTimer();
                        wasTimerRunning = false;
                    } else {
                        startTimer();
                        
                        // Start rapid countdown after short delay if key is still held
                        setTimeout(() => {
                            if (isDownArrowHeld && (isTimerRunning || wasTimerRunning)) {
                                pauseTimer(); // Stop normal timer
                                timerDisplay.classList.add('running'); // Keep green
                                startRapidCountdown();
                            }
                        }, 200);
                    }
                }
                return;
            }

            if (event.key.toLowerCase() === 'h') {
                showHelp();
                return;
            }

            // Handle number input (0-9)
            if (event.key >= '0' && event.key <= '9') {
                // Add digit to input, max 4 digits
                if (inputNumber.length < 4) {
                    inputNumber += event.key;
                    lockedPositions = inputNumber.length;
                    
                    // If 4 digits entered, stop flashing automatically
                    if (inputNumber.length === 4) {
                        stopFlashing();
                    }
                }
            }
            
            // Handle backspace or spacebar - clear input and restart flashing
            else if (event.key === 'Backspace' || event.code === 'Space') {
                inputNumber = '';
                lockedPositions = 0;
                startFlashing();
            }
        });

        document.addEventListener('keyup', function(event) {
            if (event.code === 'ArrowDown') {
                isDownArrowHeld = false;
                
                // If rapid countdown was running
                if (rapidCountdownInterval) {
                    stopRapidCountdown();
                    
                    // Resume normal timer if it was running before rapid countdown
                    if (wasTimerRunning && timeRemaining > 0) {
                        startTimer();
                    } else if (timeRemaining <= 0) {
                        pauseTimer();
                    }
                }
            }
        });

        // Focus on the page to capture keyboard events
        document.addEventListener('DOMContentLoaded', function() {
            document.body.focus();
            document.body.tabIndex = -1;
            updateTimerDisplay(); // Initialize timer display
            
            // Reset and start flashing
            inputNumber = '';
            lockedPositions = 0;
            setTimeout(() => {
                startFlashing();
            }, 100);
        });

        // Also ensure focus on click
        document.addEventListener('click', function() {
            document.body.focus();
        });
    </script>
</body>
</html>