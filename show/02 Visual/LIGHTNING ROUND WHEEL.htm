<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lightning Round Styles</title>
    <link href="https://fonts.googleapis.com/css2?family=Bangers:wght@400&family=Anton:wght@400&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: #F5F5F5;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Bangers', cursive;
            overflow: hidden;
        }

        .wheel-container {
            position: relative;
            width: 600px;
            height: 600px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .wheel {
            position: relative;
            width: 500px;
            height: 500px;
            border-radius: 50%;
            border: 8px solid #2C2C2C;
            background: conic-gradient(
                #1A1A2E 0deg 24deg,
                #FF6B35 24deg 48deg,
                #E94560 48deg 72deg,
                #16A085 72deg 96deg,
                #F39C12 96deg 120deg,
                #1A1A2E 120deg 144deg,
                #FF6B35 144deg 168deg,
                #E94560 168deg 192deg,
                #16A085 192deg 216deg,
                #F39C12 216deg 240deg,
                #1A1A2E 240deg 264deg,
                #FF6B35 264deg 288deg,
                #E94560 288deg 312deg,
                #16A085 312deg 336deg,
                #F39C12 336deg 360deg
            );
            box-shadow: 0 0 30px rgba(0,0,0,0.3);
            transition: transform 4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        .segment-divider {
            position: absolute;
            top: 0;
            left: 50%;
            width: 3px;
            height: 50%;
            background: #2C2C2C;
            transform-origin: bottom center;
            z-index: 5;
        }

        .wheel-text-segment {
            position: absolute;
            top: 50%;
            left: 50%;
            transform-origin: center;
            pointer-events: none;
            z-index: 10;
        }

        .wheel-letter {
            position: absolute;
            font-size: 1.3rem;
            font-family: 'Anton', sans-serif;
            color: #000000;
            text-shadow: 
                1px 1px 0 #FFFFFF, 
                -1px -1px 0 #FFFFFF, 
                1px -1px 0 #FFFFFF, 
                -1px 1px 0 #FFFFFF,
                2px 2px 0 #FFFFFF,
                -2px -2px 0 #FFFFFF,
                2px -2px 0 #FFFFFF,
                -2px 2px 0 #FFFFFF;
            font-weight: 400;
            text-transform: uppercase;
            text-align: center;
            width: 24px;
            height: 24px;
            line-height: 24px;
            letter-spacing: 0;
        }

        .pointer {
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 30px solid transparent;
            border-right: 30px solid transparent;
            border-top: 60px solid #FFF;
            z-index: 20;
            filter: drop-shadow(0 5px 10px rgba(0,0,0,0.3));
        }

        .center-button {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100px;
            height: 100px;
            background: #2C2C2C;
            border-radius: 50%;
            border: 6px solid #FFFFFF;
            z-index: 25;
            box-shadow: 0 0 15px rgba(0,0,0,0.3);
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #FFFFFF;
            font-size: 3rem;
            text-shadow: 1px 1px 0 rgba(0,0,0,0.5);
        }

        .center-button:hover {
            transform: translate(-50%, -50%) scale(1.1);
            box-shadow: 0 0 25px rgba(0,0,0,0.4);
            background: #FF3B3B;
        }

        .center-button:active {
            transform: translate(-50%, -50%) scale(0.95);
        }

        .center-button.spinning {
            opacity: 0.6;
            pointer-events: none;
            background: #666;
        }

        .result-display {
            position: fixed;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            font-family: 'Bangers', cursive;
            font-size: 2.5rem;
            color: #2C2C2C;
            text-shadow: 4px 4px 0 #FFFFFF, 8px 8px 0 rgba(0,0,0,0.3);
            text-transform: uppercase;
            letter-spacing: 2px;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
            max-width: 80vw;
            text-align: center;
            line-height: 1.2;
            z-index: 30;
            background: rgba(245, 245, 245, 0.9);
            padding: 20px;
            border-radius: 15px;
            border: 4px solid #2C2C2C;
        }

        .result-display.show {
            opacity: 1;
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            0% { 
                transform: translateX(-50%) translateY(50px); 
                opacity: 0; 
            }
            100% { 
                transform: translateX(-50%) translateY(0); 
                opacity: 1; 
            }
        }
    </style>
</head>
<body>
    <div class="wheel-container">
        <div class="pointer"></div>
        <div class="wheel" id="wheel">
            <!-- 15 segment dividers -->
            <div class="segment-divider" style="transform: rotate(0deg)"></div>
            <div class="segment-divider" style="transform: rotate(24deg)"></div>
            <div class="segment-divider" style="transform: rotate(48deg)"></div>
            <div class="segment-divider" style="transform: rotate(72deg)"></div>
            <div class="segment-divider" style="transform: rotate(96deg)"></div>
            <div class="segment-divider" style="transform: rotate(120deg)"></div>
            <div class="segment-divider" style="transform: rotate(144deg)"></div>
            <div class="segment-divider" style="transform: rotate(168deg)"></div>
            <div class="segment-divider" style="transform: rotate(192deg)"></div>
            <div class="segment-divider" style="transform: rotate(216deg)"></div>
            <div class="segment-divider" style="transform: rotate(240deg)"></div>
            <div class="segment-divider" style="transform: rotate(264deg)"></div>
            <div class="segment-divider" style="transform: rotate(288deg)"></div>
            <div class="segment-divider" style="transform: rotate(312deg)"></div>
            <div class="segment-divider" style="transform: rotate(336deg)"></div>
            
            <!-- 15 text segments positioned at center of each wedge -->
            <div class="wheel-text-segment" data-text="Blue Light Special" style="transform: rotate(12deg)"></div>
            <div class="wheel-text-segment" data-text="Speed Dating" style="transform: rotate(36deg)"></div>
            <div class="wheel-text-segment" data-text="Bachelor Rose Ceremony" style="transform: rotate(60deg)"></div>
            <div class="wheel-text-segment" data-text="Soul Train Dance Line" style="transform: rotate(84deg)"></div>
            <div class="wheel-text-segment" data-text="QVC Home Shopping Blitz" style="transform: rotate(108deg)"></div>
            <div class="wheel-text-segment" data-text="Medieval Marketplace" style="transform: rotate(132deg)"></div>
            <div class="wheel-text-segment" data-text="Airport Security Check" style="transform: rotate(156deg)"></div>
            <div class="wheel-text-segment" data-text="Pawn Shop Begging" style="transform: rotate(180deg)"></div>
            <div class="wheel-text-segment" data-text="Shark Tank Pitch" style="transform: rotate(204deg)"></div>
            <div class="wheel-text-segment" data-text="Post Game Interview" style="transform: rotate(228deg)"></div>
            <div class="wheel-text-segment" data-text="Porch Pirates" style="transform: rotate(252deg)"></div>
            <div class="wheel-text-segment" data-text="Black Friday Stampede" style="transform: rotate(300deg)"></div>
            <div class="wheel-text-segment" data-text="Escape Room Puzzles" style="transform: rotate(324deg)"></div>
            <div class="wheel-text-segment" data-text="Doomsday Prepper Swap Meet" style="transform: rotate(348deg)"></div>
        </div>
        <div class="center-button" id="spinButton" onclick="spinWheel()">âš¡</div>
        <div class="result-display" id="result"></div>
    </div>

    <script>
        // Comedy themes for SOLD OUT Comedy
        const comedyThemes = [
            "Blue Light Special",
            "Speed Dating", 
            "Bachelor Rose Ceremony",
            "Soul Train Dance Line",
            "QVC Home Shopping Blitz",
            "Medieval Marketplace",
            "Airport Security Check",
            "Pawn Shop Begging",
            "Shark Tank Pitch",
            "Post Game Interview",
            "Porch Pirates",
            "Garage Sale Gold Rush",
            "Black Friday Stampede", 
            "Escape Room Puzzles",
            "Doomsday Prepper Swap Meet"
        ];

        // Shortened versions for wheel display with better length management
        const wheelDisplayText = {
            "Blue Light Special": "BLUE LT",
            "Speed Dating": "SPEED",
            "Bachelor Rose Ceremony": "BACHELOR",
            "Soul Train Dance Line": "SOUL TRN", 
            "QVC Home Shopping Blitz": "QVC",
            "Medieval Marketplace": "MEDIEVAL",
            "Airport Security Check": "AIRPORT",
            "Pawn Shop Begging": "PAWN",
            "Shark Tank Pitch": "SHARK TK",
            "Post Game Interview": "POST GM",
            "Porch Pirates": "PIRATES",
            "Garage Sale Gold Rush": "GARAGE",
            "Black Friday Stampede": "BLACK FR",
            "Escape Room Puzzles": "ESCAPE",
            "Doomsday Prepper Swap Meet": "DOOMSDAY"
        };

        let isSpinning = false;

        // Create stacked letters for each segment
        function createStackedText() {
            const segments = document.querySelectorAll('.wheel-text-segment');
            
            segments.forEach(segment => {
                const fullText = segment.getAttribute('data-text');
                const displayText = wheelDisplayText[fullText] || fullText;
                
                // Remove spaces and split into letters
                const letters = displayText.replace(/\s/g, '').split('');
                
                letters.forEach((letter, index) => {
                    const letterElement = document.createElement('div');
                    letterElement.className = 'wheel-letter';
                    letterElement.textContent = letter;
                    
                    // Improved spacing - start closer to edge with better spacing between letters
                    const distanceFromCenter = 230 - (index * 20);
                    letterElement.style.top = `-${distanceFromCenter}px`;
                    letterElement.style.left = '-12px'; // Better centering
                    
                    segment.appendChild(letterElement);
                });
            });
        }

        function spinWheel() {
            if (isSpinning) return;
            
            isSpinning = true;
            const button = document.getElementById('spinButton');
            const wheel = document.getElementById('wheel');
            const result = document.getElementById('result');
            
            // Hide previous result
            result.classList.remove('show');
            
            // Update button state
            button.classList.add('spinning');
            button.textContent = 'âš¡';
            
            // Reset wheel to 0 degrees instantly before spinning
            wheel.style.transition = 'none';
            wheel.style.transform = 'rotate(0deg)';
            
            // Force a reflow to apply the reset
            wheel.offsetHeight;
            
            // Restore transition and spin
            wheel.style.transition = 'transform 4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            
            // Calculate fresh spin every time
            const baseSpins = 8; // Base number of full rotations
            const randomExtra = Math.random() * 720; // Random 0-2 extra rotations  
            const finalRandomPosition = Math.random() * 360; // Random final position
            
            const totalRotation = (baseSpins * 360) + randomExtra + finalRandomPosition;
            
            // Apply fresh rotation
            wheel.style.transform = `rotate(${totalRotation}deg)`;
            
            // Calculate which segment we landed on and show result
            setTimeout(() => {
                // Calculate final position (where the wheel stopped)
                const finalPosition = totalRotation % 360;
                
                // What was originally at the pointer position (0Â°) before rotation?
                const originalPosition = (360 - finalPosition) % 360;
                
                // Each segment spans 24Â°: [0-24Â°], [24-48Â°], [48-72Â°], etc.
                const degreesPerSegment = 360 / comedyThemes.length; // 24Â°
                const segmentIndex = Math.floor(originalPosition / degreesPerSegment);
                
                console.log('Final wheel rotation:', finalPosition);
                console.log('Original position under pointer:', originalPosition);
                console.log('Calculated segment index:', segmentIndex);
                console.log('Selected theme:', comedyThemes[segmentIndex]);
                
                // Show the full name of the selected theme
                const selectedTheme = comedyThemes[segmentIndex];
                
                if (result) {
                    result.textContent = selectedTheme;
                    result.classList.add('show');
                } else {
                    console.error('Result element not found!');
                }
                
                // Reset button
                button.classList.remove('spinning');
                button.textContent = 'âš¡';
                isSpinning = false;
            }, 4000);
        }

        // Keyboard control for OBS
        document.addEventListener('keydown', (event) => {
            if (event.code === 'Space') {
                event.preventDefault();
                spinWheel();
            }
        });

        // Initialize the wheel on page load
        document.addEventListener('DOMContentLoaded', () => {
            createStackedText();
        });
    </script>
</body>
</html>